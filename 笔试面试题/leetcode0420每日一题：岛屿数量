给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。

岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。

此外，你可以假设该网格的四条边均被水包围。

示例 1:

输入:
11110
11010
11000
00000
输出: 1

tip1:本题明显用dfs或者bfs做。
tip2:考虑递归的结束条件。grid[m][n] == '0'
tip3:考虑cnt的计数问题，何时自增。在发现第一个‘1’之后自增并进入dfs
tip4:考虑dfs的作用：将连在一起的1全部union到一起，所以dfs的作用就是将可以连在一起的1置0，下次进入dfs的条件就不会满足。


lass Solution {
public:
    void dfs(vector<vector<char>>& grid, int &row, int &col, int m, int n, int &cnt) {
        if(grid[m][n] == '0') return;
        if(grid[m][n] == '1') 
            grid[m][n] = '0';
        if(n+1<col) dfs(grid,row,col,m,n+1,cnt);
        if(m+1<row) dfs(grid,row,col,m+1,n,cnt);
        if(n-1>=0) dfs(grid,row,col,m,n-1,cnt);
        if(m-1>=0) dfs(grid,row,col,m-1,n,cnt);
    }
    int numIslands(vector<vector<char>>& grid) {
        int cnt = 0;
        if(grid.size() == 0 || grid[0].size() == 0)
            return cnt;
        int row = grid.size();
        int col = grid[0].size();
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                if(grid[i][j] == '1') {
                    cnt++;
                    dfs(grid,row,col,i,j,cnt);
                }       
            }
        }
        return cnt;
    }
};
